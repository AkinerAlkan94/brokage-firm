import com.google.googlejavaformat.java.JavaFormatterOptions

buildscript {
	dependencies {
		classpath "com.google.googlejavaformat:google-java-format:1.21.0"
	}
}

plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'com.diffplug.spotless' version '6.25.0'
}

group = 'com.akiner'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.1.0'
	implementation group: 'org.apache.commons', name: 'commons-text', version: '1.12.0'
	implementation group: 'org.json', name: 'json', version: '20240303'
	implementation group: 'com.h2database', name: 'h2', version: '2.3.232'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events 'failed', 'skipped', 'passed'
	}
}

test {
	// Run tests in parallel. Get all available cores from cpu then use it
	maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
	useJUnitPlatform()
}

tasks.withType(Test) {
	finalizedBy jacocoTestReport
}

jacoco {
	toolVersion = "0.8.11"
	reportsDirectory = layout.buildDirectory.dir("/coverageReport")
}

jacocoTestReport {
	executionData(fileTree(layout.buildDirectory).include("/jacoco/*.exec"))
	reports {
		xml.required = true
		xml.outputLocation = layout.buildDirectory.file('/reports/jacoco/all-tests/jacocoAllTestReport.xml')
	}
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.82
			}
		}
	}
}

check.dependsOn jacocoTestCoverageVerification

spotless {
	encoding 'UTF-8' // all formats will be interpreted as UTF-8
	java {
		removeUnusedImports()
		target '**/*.java'
		trimTrailingWhitespace()
		indentWithSpaces()
		custom('google-java-format') {
			com.google.googlejavaformat.java.Formatter formatter =
					new com.google.googlejavaformat.java.Formatter(
							JavaFormatterOptions.builder()
									.style(JavaFormatterOptions.Style.AOSP)
									.build())
			return formatter.formatSource(it)
		}
		encoding 'Cp1252' // except java, which will be Cp1252
	}
}